name: Safeline Daily Report

on:
  push:
    branches:
      - main
  schedule:
    # cron a UTC 15:59, que corresponde al horario de Pekín a las 23:59
    - cron: '59 15 * * *'

jobs:
  safeline-job:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Fetch WAF Data
        id: fetch_data
        run: |
          # Establecer el intervalo de tiempo (últimas 24 horas)
          begin_time=$(date -u -d 'yesterday 16:00:00' +%s)
          end_time=$(date -u -d 'today 15:59:59' +%s)
          report_date=$(date -u -d 'today' +"%Y年%m月%d日")
          echo "report_date=${report_date}" >> $GITHUB_ENV
          
          # Función para normalizar la respuesta de la API (maneja tanto objetos como arrays)
          normalize_json() {
            # Intenta acceder al primer elemento del array; si falla, usa el objeto original.
            echo "$1" | jq -c '(.[0] // .)'
          }

          # --- Obtener estadísticas de ataques ---
          echo "Fetching attack stats..."
          attack_response=$(curl --fail -s -X GET "${{ secrets.WAF_HOST }}/api/stat/basic/attack" -H "X-SLCE-API-TOKEN: ${{ secrets.WAF_TOKEN }}")
          
          echo "DEBUG: Attack API Response: [${attack_response}]"
          if [[ -z "$attack_response" ]]; then
            echo "::error::Failed to fetch attack stats. Response was empty."
            exit 1
          fi
          attack_json=$(normalize_json "$attack_response")
          
          echo "block=$(echo "$attack_json" | jq -r '.data.intercept.block')" >> $GITHUB_ENV
          echo "rate_limit=$(echo "$attack_json" | jq -r '.data.intercept.rate_limit')" >> $GITHUB_ENV
          echo "challenge=$(echo "$attack_json" | jq -r '.data.intercept.challenge')" >> $GITHUB_ENV
          echo "offline=$(echo "$attack_json" | jq -r '.data.intercept.offline')" >> $GITHUB_ENV
          echo "attack_ip=$(echo "$attack_json" | jq -r '.data.attack_ip')" >> $GITHUB_ENV

          # --- Obtener estadísticas de códigos de error ---
          echo "Fetching error code stats..."
          error_response=$(curl --fail -s -X GET "${{ secrets.WAF_HOST }}/api/stat/basic/error_status_code" -H "X-SLCE-API-TOKEN: ${{ secrets.WAF_TOKEN }}")
          
          echo "DEBUG: Error API Response: [${error_response}]"
          if [[ -z "$error_response" ]]; then
            echo "::error::Failed to fetch error stats. Response was empty."
            exit 1
          fi
          error_json=$(normalize_json "$error_response")

          echo "error_4xx=$(echo "$error_json" | jq -r '.data.error_4xx')" >> $GITHUB_ENV
          echo "error_5xx=$(echo "$error_json" | jq -r '.data.error_5xx')" >> $GITHUB_ENV

          # --- Obtener estadísticas de acceso ---
          echo "Fetching access stats..."
          access_response=$(curl --fail -s -X GET "${{ secrets.WAF_HOST }}/api/stat/advance/access?begin_time=${begin_time}&end_time=${end_time}" -H "X-SLCE-API-TOKEN: ${{ secrets.WAF_TOKEN }}")
          
          echo "DEBUG: Access API Response: [${access_response}]"
          if [[ -z "$access_response" ]]; then
            echo "::error::Failed to fetch access stats. Response was empty."
            exit 1
          fi
          access_json=$(normalize_json "$access_response")
          
          echo "access=$(echo "$access_json" | jq -r '.data.access')" >> $GITHUB_ENV
          echo "session=$(echo "$access_json" | jq -r '.data.session')" >> $GITHUB_ENV
          echo "ip=$(echo "$access_json" | jq -r '.data.ip')" >> $GITHUB_ENV

      - name: 2. Send Report to Feishu
        run: |
          payload=$(cat <<EOF
          {
            "msg_type": "interactive",
            "card": {
              "header": {
                "title": { "tag": "plain_text", "content": "🛡️ 长亭 WAF 每日安全简报 (${{ env.report_date }})" },
                "template": "blue"
              },
              "elements": [
                { "tag": "div", "fields": [
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**总访问量 (PV):**\n${{ env.access }}" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**独立IP数 (UV):**\n${{ env.ip }}" } }
                  ]
                },
                { "tag": "hr" },
                { "tag": "div", "fields": [
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**拦截总数:**\n${{ env.block }}" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**攻击IP数:**\n${{ env.attack_ip }}" } },
                    { "is_short": false, "text": { "tag": "lark_md", "content": "" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**速率限制:** ${{ env.rate_limit }}" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**人机挑战:** ${{ env.challenge }}" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**离线封禁:** ${{ env.offline }}" } }
                  ]
                },
                { "tag": "hr" },
                { "tag": "div", "fields": [
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**4xx 错误数:**\n${{ env.error_4xx }}" } },
                    { "is_short": true, "text": { "tag": "lark_md", "content": "**5xx 错误数:**\n${{ env.error_5xx }}" } }
                  ]
                },
                { "tag": "note", "elements": [ { "tag": "plain_text", "content": "报告生成于: $(date -u) UTC" } ] }
              ]
            }
          }
          EOF
          )
          
          curl -X POST -H "Content-Type: application/json" -d "$payload" ${{ secrets.FEISHU_URL }}